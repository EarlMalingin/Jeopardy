# Simple Render-optimized Dockerfile for Laravel Jeopardy App
FROM php:8.2-apache

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    sqlite3 \
    libsqlite3-dev \
    && docker-php-ext-install pdo pdo_sqlite pdo_mysql mbstring exif pcntl bcmath gd zip

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files first
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction

# Copy application files
COPY . .

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache \
    && chmod +x /var/www/html/artisan

# Create .env file if it doesn't exist
RUN if [ ! -f .env ]; then \
    if [ -f .env.example ]; then \
        cp .env.example .env; \
    else \
        echo "APP_NAME=\"Jeopardy Game\"" > .env; \
        echo "APP_ENV=production" >> .env; \
        echo "APP_KEY=" >> .env; \
        echo "APP_DEBUG=false" >> .env; \
        echo "APP_URL=http://localhost" >> .env; \
        echo "LOG_CHANNEL=stack" >> .env; \
        echo "DB_CONNECTION=sqlite" >> .env; \
        echo "DB_DATABASE=database/database.sqlite" >> .env; \
        echo "CACHE_DRIVER=file" >> .env; \
        echo "SESSION_DRIVER=file" >> .env; \
        echo "QUEUE_CONNECTION=sync" >> .env; \
    fi; \
fi

# Create database directory (for SQLite fallback)
RUN mkdir -p database \
    && touch database/database.sqlite \
    && chown www-data:www-data database/database.sqlite

# Create storage directories and set permissions
RUN mkdir -p storage/framework/cache/data \
    && mkdir -p storage/framework/sessions \
    && mkdir -p storage/framework/views \
    && mkdir -p storage/logs \
    && chown -R www-data:www-data storage \
    && chmod -R 775 storage

# Enable Apache modules
RUN a2enmod rewrite

# Configure Apache for Laravel
RUN echo '<VirtualHost *:${PORT:-80}>\n\
    DocumentRoot /var/www/html/public\n\
    <Directory /var/www/html/public>\n\
        AllowOverride All\n\
        Require all granted\n\
    </Directory>\n\
    ErrorLog ${APACHE_LOG_DIR}/error.log\n\
    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf.template

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Starting Jeopardy App..."\n\
\n\
# Generate key if not set\n\
if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then\n\
    echo "Generating application key..."\n\
    php artisan key:generate --no-interaction || echo "Key generation failed"\n\
fi\n\
\n\
# Run migrations\n\
echo "Running migrations..."\n\
php artisan migrate --force || echo "Migrations failed, continuing..."\n\
\n\
# Clear and cache config\n\
echo "Clearing and rebuilding caches..."\n\
php artisan config:clear || echo "Config clear failed"\n\
php artisan config:cache || echo "Config cache failed"\n\
php artisan route:clear || echo "Route clear failed"\n\
php artisan route:cache || echo "Route cache failed"\n\
php artisan view:clear || echo "View clear failed"\n\
php artisan view:cache || echo "View cache failed"\n\
\n\
# Configure Apache with the correct port\n\
echo "Configuring Apache to listen on port ${PORT:-80}..."\n\
envsubst '\$PORT' < /etc/apache2/sites-available/000-default.conf.template > /etc/apache2/sites-available/000-default.conf\n\
\n\
# Update Apache port configuration\n\
echo "Listen ${PORT:-80}" > /etc/apache2/ports.conf\n\
\n\
# Start Apache in foreground\n\
echo "Starting Apache..."\n\
apache2-foreground\n\
' > /var/www/html/start.sh && chmod +x /var/www/html/start.sh

# Expose the port that Render provides
EXPOSE ${PORT:-80}

# Use startup script
CMD ["/var/www/html/start.sh"]
