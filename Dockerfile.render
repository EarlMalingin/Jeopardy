# Simple Render-optimized Dockerfile for Laravel Jeopardy App
FROM php:8.2-fpm

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    nginx \
    supervisor \
    sqlite3 \
    libsqlite3-dev \
    net-tools \
    && docker-php-ext-install pdo pdo_sqlite pdo_mysql mbstring exif pcntl bcmath gd zip

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files first
COPY composer.json composer.lock ./

# Install PHP dependencies (without scripts to avoid artisan dependency)
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copy application files
COPY . .

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache \
    && chmod +x /var/www/html/artisan

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/sites-available/default

# Copy supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create .env file if it doesn't exist
RUN if [ ! -f .env ]; then cp .env.example .env; fi

# Create database directory (for SQLite fallback)
RUN mkdir -p database \
    && touch database/database.sqlite \
    && chown www-data:www-data database/database.sqlite

# Create storage directories and set permissions
RUN mkdir -p storage/framework/cache/data \
    && mkdir -p storage/framework/sessions \
    && mkdir -p storage/framework/views \
    && mkdir -p storage/logs \
    && chown -R www-data:www-data storage \
    && chmod -R 775 storage

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Starting Jeopardy App..."\n\
\n\
# Generate key if not set\n\
if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then\n\
    echo "Generating application key..."\n\
    php artisan key:generate --no-interaction || echo "Key generation failed"\n\
fi\n\
\n\
# Run migrations (with retry logic)\n\
echo "Running migrations..."\n\
max_migration_attempts=5\n\
migration_attempt=1\n\
while [ $migration_attempt -le $max_migration_attempts ]; do\n\
    echo "Migration attempt $migration_attempt/$max_migration_attempts..."\n\
    if php artisan migrate --force; then\n\
        echo "Migrations completed successfully!"\n\
        break\n\
    else\n\
        echo "Migration attempt $migration_attempt failed"\n\
        if [ $migration_attempt -eq $max_migration_attempts ]; then\n\
            echo "All migration attempts failed, but continuing..."\n\
        else\n\
            sleep 5\n\
        fi\n\
    fi\n\
    migration_attempt=$((migration_attempt + 1))\n\
done\n\
\n\
# Clear and recache\n\
echo "Clearing and rebuilding caches..."\n\
php artisan config:clear || echo "Config clear failed"\n\
php artisan config:cache || echo "Config cache failed"\n\
php artisan route:clear || echo "Route clear failed"\n\
php artisan route:cache || echo "Route cache failed"\n\
php artisan view:clear || echo "View clear failed"\n\
php artisan view:cache || echo "View cache failed"\n\
\n\
echo "Starting nginx and PHP-FPM..."\n\
# Start nginx and PHP-FPM directly instead of using supervisor\n\
nginx -g "daemon off;" &\n\
php-fpm &\n\
\n\
echo "Services started. Waiting for nginx to be ready..."\n\
sleep 3\n\
\n\
echo "Checking if nginx is listening on port 80..."\n\
netstat -tlnp | grep :80 || echo "Nginx not yet listening on port 80"\n\
\n\
# Keep the container running\n\
wait\n\
' > /var/www/html/start.sh && chmod +x /var/www/html/start.sh

# Expose port 80 (Render will map this to their internal port)
EXPOSE 80

# Use startup script
CMD ["/var/www/html/start.sh"]
